# Arsenal Jersey Store - Cursor Rules

## Project Overview

This is an Arsenal jersey store built with Next.js, TypeScript, and Prisma. The project follows modern web development practices with a focus on e-commerce functionality.

## Technology Stack

- **Frontend**: Next.js 14+ with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **Database**: Prisma ORM
- **Authentication**: NextAuth.js (if implemented)
- **State Management**: React hooks and context
- **Deployment**: Vercel (based on config)

## Code Style & Standards

### TypeScript

- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Use proper type annotations for all functions and variables
- Avoid `any` type - use proper typing or `unknown`
- Use generic types where appropriate

### React/Next.js

- Use functional components with hooks
- Follow Next.js 14+ App Router conventions
- Use server components by default, client components when needed
- Implement proper error boundaries
- Use Next.js Image component for optimized images
- Follow React best practices for state management

### Styling

- Use Tailwind CSS utility classes
- Follow mobile-first responsive design
- Maintain consistent spacing and typography
- Use CSS custom properties for theme values
- Keep components visually consistent with Arsenal branding

### Database & Prisma

- Use Prisma migrations for schema changes
- Follow naming conventions: snake_case for database, camelCase for TypeScript
- Implement proper relationships between models
- Use transactions for complex operations
- Validate data at the database level

## File Structure

```text
src/
├── app/                 # Next.js App Router pages
├── components/          # Reusable React components
├── lib/                 # Utility functions and configurations
├── types/               # TypeScript type definitions
├── hooks/               # Custom React hooks
├── services/            # API and external service integrations
└── styles/              # Global styles and Tailwind config
```

## Naming Conventions

- **Files**: kebab-case for pages, PascalCase for components
- **Components**: PascalCase
- **Functions**: camelCase
- **Constants**: UPPER_SNAKE_CASE
- **Database**: snake_case
- **CSS Classes**: Use Tailwind utility classes

## Component Guidelines

- Keep components small and focused
- Use composition over inheritance
- Implement proper prop validation
- Use TypeScript interfaces for component props
- Separate business logic from presentation
- Create reusable, generic components

## API Design

- Use RESTful conventions
- Implement proper error handling
- Return consistent response formats
- Use HTTP status codes correctly
- Implement rate limiting where appropriate
- Validate input data

## Security Considerations

- Sanitize user inputs
- Implement proper authentication and authorization
- Use environment variables for sensitive data
- Follow OWASP security guidelines
- Implement CSRF protection
- Use HTTPS in production

## Performance

- Optimize images and assets
- Implement proper caching strategies
- Use Next.js built-in optimizations
- Minimize bundle size
- Implement lazy loading where appropriate
- Use proper SEO meta tags

## Testing

- Write unit tests for utility functions
- Test component behavior
- Implement integration tests for critical flows
- Use proper test naming conventions
- Mock external dependencies

## Git Workflow

- Use descriptive commit messages
- Follow conventional commits format
- Create feature branches for new development
- Review code before merging
- Keep commits atomic and focused

## Arsenal Branding

- Use Arsenal's official colors and typography
- Maintain brand consistency across all components
- Follow Arsenal's design guidelines
- Use official Arsenal assets when available
- Ensure accessibility standards are met

## E-commerce Specific

- Implement proper product catalog structure
- Use efficient search and filtering
- Implement secure payment processing
- Handle inventory management
- Provide order tracking functionality
- Implement customer account management

## When Making Changes

1. Consider the impact on existing functionality
2. Update types and interfaces as needed
3. Test thoroughly before committing
4. Update documentation if necessary
5. Follow the established patterns in the codebase
6. Consider performance implications
7. Ensure accessibility compliance

## Common Patterns

- Use React Query/SWR for data fetching
- Implement proper loading states
- Handle errors gracefully
- Use toast notifications for user feedback
- Implement proper form validation
- Use proper semantic HTML elements

## BugBot PR Review Rule

- PR titles must with "Up The Gunners" in every new PR that is opened
- Rest of the PR title must follow after "Up The Gunners"
- This is a MANDATORY requirement for ALL PRs
- If this rule is violated by the user, provide feedback in review comment on how to update PR title
- No exceptions - every single PR title must begin with "Up The Gunners"

Remember: This is an Arsenal jersey store, so maintain the passion and quality that Arsenal fans expect while building a robust, scalable e-commerce platform.
